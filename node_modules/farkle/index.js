var scoreCounter = require('./scoring.js');
var payouts = require('./payouts.json');

const TOTAL_DICE = 6;

FarkleFactory = function(){
    this.createFarkleGame = function(){
        return new Farkle();
    }
}

Farkle = function(){
    var currentPlayer;
    var players = [];
    
    this.acceptAction = function(connection, info) { 
        //only let this action proceed if the current player requested it
        if (connection != currentPlayer) return;
        
		var i;
		switch(info.action){
			case "roll":
								
				var diceToRoll = TOTAL_DICE;
				console.log("total dice: " + diceToRoll);
				if (info.hold && info.hold.length > 0) {
					
					var lastScore = scoreCounter(info.hold);
					
					if (lastScore == 0){
						//illegal hold.
						currentPlayer.write(JSON.stringify({ action:"illegalHold" }));
						return;
					}
                    
                    //ensure held numbers are legitimate
                    for (i = 0; i < info.hold.length; i++){
                        console.log("checking hold: " + info.hold[i]);
                        var nextIndex = currentPlayer.rolled.indexOf(info.hold[i]); 
                        if (nextIndex >= 0) {
                            console.log("matched!");
                            currentPlayer.rolled.splice(nextIndex, 1);
                        } else {
                            //illegal hold
                            currentPlayer.write(JSON.stringify({ action:"illegalHold" }));
                            return;
                        }
                    }
					
					currentPlayer.roundScore += lastScore;
					currentPlayer.held = currentPlayer.held.concat(info.hold);
                    
                    diceToRoll -= currentPlayer.held.length;
					
				} 
				
				if (diceToRoll == 0) {
					//all dice were held
					currentPlayer.held = [];
					
					diceToRoll = TOTAL_DICE;
				} 
				
				var gameOver = false;
                
				currentPlayer.rolled = [];
				console.log("roll dice: " + diceToRoll);
                for (i = 1; i <= diceToRoll; i++){
					var randomRoll = rollDie();
					
					currentPlayer.rolled.push(randomRoll);
				}
				
				if (scoreCounter(currentPlayer.rolled) == 0) {
					gameOver = true;
					currentPlayer.roundScore = 0;
				}
				
				var returnObj = { action:"roll",
								  gameOver:gameOver,
								  roundScore:currentPlayer.roundScore,
								  totalScore:currentPlayer.totalScore,
                                  id:currentPlayer.connectionId,
								  result:currentPlayer.rolled };
				
				currentPlayer.write(JSON.stringify(returnObj));
				
                returnObj.action = "oppRoll";
				returnObj.held = currentPlayer.held;
				
                //update other players to move. Also check to see if anyone's over the win amount
                var finalTurn = false;
                
                for (i = 0; i < players.length; i++) {
                    if (players[i] != currentPlayer) {
                        players[i].write(JSON.stringify(returnObj));
                    }                 
                }				
				
				if (gameOver) {
					//check to see if another player's already over the win amount
                    if (getNextPlayer().totalScore >= payouts.amount_to_win) {
						endGame();
					} else {
						switchTurn();
					}
				}
				
				break;
				
			case "endTurn":
				var leftOnTable = scoreCounter(currentPlayer.rolled);
				
				currentPlayer.roundScore += leftOnTable;
				
				currentPlayer.totalScore += currentPlayer.roundScore;
				
				var returnObj = { action:"oppTurnEnded",
								  held:currentPlayer.held.concat(currentPlayer.rolled),
								  id:currentPlayer.connectionId };
                
                for (i = 0; i < players.length; i++) {
                    if (players[i] != currentPlayer) {
                        players[i].write(JSON.stringify(returnObj));
                    }
                }
				
                console.log("next player over? " + getNextPlayer().totalScore + " vs " + payouts.amount_to_win);
				if (getNextPlayer().totalScore >= payouts.amount_to_win) {
					endGame();
				 } else {
				
					switchTurn();
				}
				break;
            }
		}
        
        this.initGame = function(allPlayers) {
             for (var i = 0; i < allPlayers.length; i++){
                var newPlayer = allPlayers[i];
                newPlayer.roundScore = 0;
                newPlayer.totalScore = 0;
                newPlayer.frozen = 0;
                players.push(newPlayer);
            }

            switchTurn();
        }
        
        function endGame(){
            console.log("games over");
            //next player exceed win amout already. See who won
            var winners = determineWinner();

            if (winners.length > 1) {
                for (i = 0; i < winners.length; i++) {
                    winners[i].write(JSON.stringify( { action:"tieGame" }));
                }

            } else {
                winners[0].write(JSON.stringify( { action:"wonGame" }));
            }

            for (i = 0; i < players.length; i++) {
                if (winners.indexOf(players[i]) < 0) {
                    players[i].write(JSON.stringify( { action:"lostGame" }));
                }
            }
        }
        
        function rollDie(){
          return Math.ceil(Math.random() * 6);
        }

        function switchTurn(){
            var scores = [];
            
            if (currentPlayer == null) {
                //game just started
                currentPlayer = players[0];
            } else {
                for (i = 0; i < players.length; i++) {
                    var playerScore = { id:players[i].connectionId,
                                        roundScore:players[i].roundScore,
                                        totalScore:players[i].totalScore }
                    
                    scores.push(playerScore);
                }
                
                currentPlayer = getNextPlayer();
            }
            
            currentPlayer.held = [];
            
            //notify players of all scores
            for (i = 0; i < players.length; i++) {
                players[i].write(JSON.stringify({ action:"updateScore", scores:scores, turn:currentPlayer.playerName }));
            }
            
            currentPlayer.roundScore = 0;
            currentPlayer.write(JSON.stringify({ action:"startTurn" }));
        }
                
        function determineWinner(){
            var winningIndex;
            var winningAmount = 0;
            
            for (i = 0; i < players.length; i++){
                if (players[i].totalScore > winningAmount) {
                    winningIndex = i;
                }
            }
            
            var winners = [];
            
            for (i = 0; i < players.length; i++) {
                if (players[i].totalScore == players[winningIndex].totalScore) {
                    winners.push(players[i]);
                }
            }
            
            return winners;
        }
                
        function getNextPlayer() {
            for (i = 0; i < players.length; i++) {
                if (currentPlayer == players[i]) {
                     if (players.length == i + 1) {
                         return players[0];
                     } else {
                         return players[i + 1];
                     }
                }
            }
        }
    }

module.exports = new FarkleFactory();